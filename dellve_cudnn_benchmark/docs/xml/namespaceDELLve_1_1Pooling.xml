<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="namespaceDELLve_1_1Pooling" kind="namespace">
    <compoundname>DELLve::Pooling</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceDELLve_1_1Pooling_1a63b7ace181c50465fc713a63858db5b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CuDNN::PoolingMode</type>
        <definition>CuDNN::PoolingMode DELLve::Pooling::convertMode</definition>
        <argsstring>(std::string mode)</argsstring>
        <name>convertMode</name>
        <param>
          <type>std::string</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dellvedeep/dellve/dellve_cudnn/dellve_cudnn_benchmark/include/dellve_cudnn_pooling.hpp" line="22" column="1" bodyfile="/home/dellvedeep/dellve/dellve_cudnn/dellve_cudnn_benchmark/include/dellve_cudnn_pooling.hpp" bodystart="22" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespaceDELLve_1_1Pooling_1a3ecccf85377e3ca6502a1fff21ac126d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>DELLve::Benchmark</type>
        <definition>DELLve::Benchmark DELLve::Pooling::forward</definition>
        <argsstring>(int w, int h, int c, int n, int winH, int winW, int padH, int padW, int vStride, int hStride, std::string mode)</argsstring>
        <name>forward</name>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>winH</declname>
        </param>
        <param>
          <type>int</type>
          <declname>winW</declname>
        </param>
        <param>
          <type>int</type>
          <declname>padH</declname>
        </param>
        <param>
          <type>int</type>
          <declname>padW</declname>
        </param>
        <param>
          <type>int</type>
          <declname>vStride</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hStride</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CuDNN Pooling Forward</para><para>Build 4D tensors using NCHW provided. Fill the input with random data using the cuRAND library. Then, calculate the forward output dimensions and set up a 4d tensor for output. Finally, return the function to run the operation with forward propagation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>- Width of each feature map </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>- Height of each feature map </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>- Number of feature maps per image </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>- Number of feature maps </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>winH</parametername>
</parameternamelist>
<parameterdescription>
<para>- Height of pooling window </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>winW</parametername>
</parameternamelist>
<parameterdescription>
<para>- Width of pooling window </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>padH</parametername>
</parameternamelist>
<parameterdescription>
<para>- Height of the zero padding </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>padW</parametername>
</parameternamelist>
<parameterdescription>
<para>- Width of the zero padding </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vStride</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pooling vertical stride </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hStride</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pooling horizontal stride </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pooling mode ot run. Can be max, avgpad, avgnopad </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dellvedeep/dellve/dellve_cudnn/dellve_cudnn_benchmark/include/dellve_cudnn_pooling.hpp" line="59" column="1" bodyfile="/home/dellvedeep/dellve/dellve_cudnn/dellve_cudnn_benchmark/include/dellve_cudnn_pooling.hpp" bodystart="59" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespaceDELLve_1_1Pooling_1a484a1cd353433549fb20a9035b0f14bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>DELLve::Benchmark</type>
        <definition>DELLve::Benchmark DELLve::Pooling::backward</definition>
        <argsstring>(int w, int h, int c, int n, int winH, int winW, int padH, int padW, int hStride, int wStride, std::string mode)</argsstring>
        <name>backward</name>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>winH</declname>
        </param>
        <param>
          <type>int</type>
          <declname>winW</declname>
        </param>
        <param>
          <type>int</type>
          <declname>padH</declname>
        </param>
        <param>
          <type>int</type>
          <declname>padW</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hStride</declname>
        </param>
        <param>
          <type>int</type>
          <declname>wStride</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CuDNN Pooling Backward</para><para>Build 4D tensors using NCHW provided. Fill the input with random data using the cuRAND library. Then, calculate the backward output dimensions and set up a 4d tensor for output. Finally, return the function to run the operation with backward propagation.</para><para><simplesect kind="see"><para>See forward for parameter details </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dellvedeep/dellve/dellve_cudnn/dellve_cudnn_benchmark/include/dellve_cudnn_pooling.hpp" line="113" column="1" bodyfile="/home/dellvedeep/dellve/dellve_cudnn/dellve_cudnn_benchmark/include/dellve_cudnn_pooling.hpp" bodystart="113" bodyend="158"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/dellvedeep/dellve/dellve_cudnn/dellve_cudnn_benchmark/include/dellve_cudnn_pooling.hpp" line="21" column="1"/>
  </compounddef>
</doxygen>
